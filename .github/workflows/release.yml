name: Release WakeMyMac

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers tags that match a pattern vX.X.X

jobs:
  build:
    runs-on: macos-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Extract version from tag
        id: extract_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Generate version file
        run: |
          echo "// This file is auto-generated by GitHub Actions" > WakeMyMac/Version.swift
          echo "let appVersion = \"${VERSION}\"" >> WakeMyMac/Models/Version.swift

      - name: Clean previous builds
        run: rm -rf build

# Intel
      - name: Build binary for x86_64
        run: |
          xcodebuild -scheme WakeMyMac \
                     -configuration Release \
                     -derivedDataPath build/x86_64 \
                     -arch x86_64 \
                     CODE_SIGNING_ALLOWED=NO
# M-chips
      - name: Build binary for arm64
        run: |
          xcodebuild -scheme WakeMyMac \
                     -configuration Release \
                     -derivedDataPath build/arm64 \
                     -arch arm64 \
                     CODE_SIGNING_ALLOWED=NO

# Merge 
      - name: Create universal binary using lipo
        run: |
          # Path to binary
          X86_BINARY="build/x86_64/Build/Products/Release/WakeMyMac"
          ARM_BINARY="build/arm64/Build/Products/Release/WakeMyMac"

          # Binary validation
          ls -l $X86_BINARY
          ls -l $ARM_BINARY

          #Merging binary into one universal
          lipo -create "$X86_BINARY" "$ARM_BINARY" -output WakeMyMac_universal

          #Result
          lipo -info WakeMyMac_universal

          # If the build contains Frameworks, copy them to the root
          if [ -d "build/Build/Products/Release/Frameworks" ]; then
            cp -R build/Build/Products/Release/Frameworks .
          fi

          # Add rpath so the binary looks for frameworks in the Frameworks directory next to it
          install_name_tool -delete_rpath "@executable_path/Frameworks" WakeMyMac_universal || true
          install_name_tool -add_rpath "@executable_path/Frameworks" WakeMyMac_universal

          #Rename (not working)
          mv WakeMyMac_universal WakeMyMac
          
          #Final check
          ls -l .

      - name: Set executable permissions
        run: chmod +x WakeMyMac

      - name: Create tarball
        run: tar -czvf WakeMyMac_${{ env.VERSION }}.tar.gz WakeMyMac

      - name: Calculate SHA256
        id: calculate_sha
        run: echo "SHA256=$(shasum -a 256 WakeMyMac_${{ env.VERSION }}.tar.gz | awk '{print $1}')" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: WakeMyMac_${{ env.VERSION }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Update Homebrew Formula
        run: |
          FORMULA_FILE=Formula/wakemymac.rb
          sed -i.bak \
              -e "s|url \".*\"|url \"https://github.com/mnmn13/WakeMyMac/releases/download/v${{ env.VERSION }}/WakeMyMac_${{ env.VERSION }}.tar.gz\"|" \
              -e "s|sha256 \".*\"|sha256 \"${{ env.SHA256 }}\"|" \
              -e "s|version \".*\"|version \"${{ env.VERSION }}\"|" \
              $FORMULA_FILE
          rm ${FORMULA_FILE}.bak
          
          git add $FORMULA_FILE
          
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          git checkout main
          git commit -am "Automated report"
          git push

        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
